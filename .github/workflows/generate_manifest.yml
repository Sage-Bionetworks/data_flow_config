# ------------------------------------------------------------------------------
# Generate a data flow manifest
# Then open a PR to incorporate them into the repo
# ------------------------------------------------------------------------------
name: generate-dataflow-manifest
on:
  workflow_dispatch:
    inputs:
      config_dir:
        description: Directory that contains dfa_config.json (ex. "Demo")
        required: true

jobs:
  generate-manifest:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GH_PAT }}
      SCHEMATIC_BASE_URL: https://schematic.api.sagebionetworks.org
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pip libicu-dev libcurl4-openssl-dev

      - name: Install R packages
        run: |
          options(repos = c(REPO_NAME = "https://packagemanager.rstudio.com/all/__linux__/xenial/latest", 
            getOption("repos")))
          install.packages(c("stringi", "jsonlite", "dplyr", "remotes", "curl","httr"))
          remotes::install_github("Sage-Bionetworks/dfamodules@v24.5.1")
        shell: Rscript {0}

      - name: Set variables
        shell: bash
        run: |
          if ${{ github.event_name == 'workflow_dispatch' }}
          then
            echo Using variable from manual input
            echo 'CONFIG_DIR=${{ inputs.config_dir }}' >> $GITHUB_ENV
          else
            echo using testing variables
            echo 'CONFIG_DIR=tst_submit_generated_manifest' >> $GITHUB_ENV
          fi

      - name: Generate Data Flow manifest and Submit to Synapse
        shell: Rscript {0}
        run: |

          if (!file.exists(Sys.getenv("CONFIG_DIR"))) {
            stop(paste0("No configuration directory at ", Sys.getenv("CONFIG_DIR")))
            }

          config_path <- file.path(Sys.getenv("CONFIG_DIR"), "dfa_config.json")

          if (!file.exists(config_path)) {
            stop(paste0("dfa_config.json does not exist at ", config_path))
          }

          message("Getting configuration file from ", config_path)

          dfa_config <- jsonlite::read_json(config_path)

          if (is.null(dfa_config$dcc$synapse_asset_view) | nchar(dfa_config$dcc$synapse_asset_view) == 0) stop("dfa_config.json is missing synapse_asset_view")
          if (is.null(dfa_config$dcc$data_model_url) | nchar(dfa_config$dcc$data_model_url) == 0) stop("dfa_config.json is missing data_model_url")

          dataflow_manifest <- tryCatch(
            {
              dfamodules::generate_dataflow_manifest(
                asset_view = dfa_config$dcc$synapse_asset_view,
                schema_url = dfa_config$dcc$data_model_url,
                access_token = "${{ secrets.SYNAPSE_PAT }}",
                na_replace = "",
                base_url = "${{ env.SCHEMATIC_BASE_URL }}")
            },
            error = function(e) {
              message(e)
              stop("Failed to generate Data Flow manifest")
            }
          )

          message("Successfully generated Data Flow Manifest")

          tryCatch(
            {
              write.csv(
                x = dataflow_manifest,
                file = "./synapse_storage_manifest_dataflow.csv",
                row.names = FALSE
              )
            },
            error = function(e) {
              message(e)
              stop("Failed to write Data Flow manifest")
            }
          )

          tryCatch(
            {
              dfamodules::model_submit(
                data_type = NULL,
                asset_view = dfa_config$dcc$synapse_asset_view,
                dataset_id = dfa_config$dcc$manifest_dataset_id,
                file_name = "./synapse_storage_manifest_dataflow.csv",
                access_token = "${{ secrets.SYNAPSE_PAT }}",
                restrict_rules = TRUE,
                manifest_record_type = "file_only",
                base_url = "${{ env.SCHEMATIC_BASE_URL }}",
                schema_url = dfa_config$dcc$data_model_url,
                use_schema_label = TRUE)
            },
            error = function(e) {
              traceback()
              stop("Failed to submit Data Flow manifest")
            }
          )

          synapse_url <- file.path("https://www.synapse.org/Synapse:", dfa_config$dcc$manifest_dataset_id)
          message("Successfully submitted manifest to ", synapse_url)
