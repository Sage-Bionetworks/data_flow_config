# ------------------------------------------------------------------------------
# Generate a data flow manifest
# Then open a PR to incorporate them into the repo
# ------------------------------------------------------------------------------
name: generate-dataflow-manifest
on:
  workflow_dispatch:
    inputs:
      config_dir:
        description: Directory that contains dfa_config.json (ex. "Demo")
        required: true
  push:

jobs:
  generate-manifest:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GH_PAT }}
      SCHEMATIC_BASE_URL: https://schematic.api.sagebionetworks.org
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pip libicu-dev libcurl4-openssl-dev

      - name: Install R packages
        run: |
          options(repos = c(REPO_NAME = "https://packagemanager.rstudio.com/all/__linux__/xenial/latest", 
            getOption("repos")))
          install.packages(c("stringi", "jsonlite", "dplyr", "remotes", "curl","httr"))
          remotes::install_github("Sage-Bionetworks/dfamodules@v24.5.1")
        shell: Rscript {0}

      - name: Set variables
        shell: bash
        run: |
          echo ${{ github.event_name }}
          if ${{ github.event_name == 'workflow_dispatch' }}
          then
            echo Using variable from manual input
            echo 'config_dir=${{ inputs.config_dir }}' >> $GITHUB_ENV
          else
            echo using testing variables
            echo 'config_dir=tst_submit_generated_manifest' >> $GITHUB_ENV
          fi

      - name: TEST
        shell: bash
        run: echo ${{ env.config_dir }}

      - name: TEST2
        shell: bash
        run: echo $config_dir

      - name: TEST3
        shell: Rscript {0}
        run: print ${{ env.config_dir }}

      - name: TEST4
        shell: Rscript {0}
        run: print(Sys.getenv("config_dir"))

      # - name: Generate Data Flow manifest and Submit to Synapse
      #   shell: Rscript {0}
      #   run: |
      #     config_path <- file.path("$config_dir", "dfa_config.json")

      #     dfa_config <- jsonlite::read_json(config_path)

      #     dataflow_manifest <- tryCatch(
      #       {
      #         dfamodules::generate_dataflow_manifest(
      #           asset_view = dfa_config$dcc$synapse_asset_view,
      #           schema_url = dfa_config$dcc$data_model_url,
      #           access_token = "${{ secrets.SYNAPSE_PAT }}",
      #           na_replace = "",
      #           base_url = "${{ env.SCHEMATIC_BASE_URL }}")
      #       },
      #       error = function(e) {
      #         message(e)
      #         stop("ERROR: Data Flow manifest generation has failed")
      #       }
      #     )

      #     message("Successfully generated Data Flow Manifest")

      #     write.csv(
      #       x = dataflow_manifest,
      #       file = "synapse_storage_manifest_dataflow.csv",
      #       row.names = FALSE
      #     )

      #     submit_id <- try(
      #       {
      #         dfamodules::model_submit(
      #           data_type = "DataFlow",
      #           asset_view = dfa_config$dcc$synapse_asset_view,
      #           dataset_id = dfa_config$dcc$manifest_dataset_id,
      #           file_name = "synapse_storage_manifest_dataflow.csv",
      #           access_token = "${{ secrets.SYNAPSE_PAT }}",
      #           restrict_rules = TRUE,
      #           manifest_record_type = "table_and_file",
      #           base_url = "${{ env.SCHEMATIC_BASE_URL }}",
      #           schema_url = dfa_config$dcc$data_model_url,
      #           use_schema_label = TRUE)
      #       },
      #       silent = TRUE
      #     )

      #     if (inherits(submit_id, "try-error")) {
      #       stop("ERROR: Manifest submission failed")
      #     } else {
      #       synapse_url <- file.path("https://www.synapse.org/Synapse:", dfa_config$dcc$manifest_dataset_id)
      #       message("Successfully submitted manifest to ", synapse_url)
      #     }
