# ------------------------------------------------------------------------------
# Generate a data flow manifest
# Then open a PR to incorporate them into the repo
# ------------------------------------------------------------------------------
name: generate-dataflow-manifest
on:
  workflow_dispatch:
    inputs:
      data_model:
        description: URL to a jsonld data model file
        required: true
      community_dir:
        description: Community directory
        required: true
  push:

jobs:
  generate-manifest:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GH_PAT }}
      SCHEMATIC_BASE_URL: https://schematic.api.sagebionetworks.org
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pip libicu-dev libcurl4-openssl-dev

      - name: Install R packages
        run: |
          options(repos = c(REPO_NAME = "https://packagemanager.rstudio.com/all/__linux__/xenial/latest", 
            getOption("repos")))
          install.packages(c("stringi", "jsonlite", "dplyr", "remotes", "curl","httr"))
          remotes::install_github("Sage-Bionetworks/dfamodules", ref = "fds-1494-generate-nf-manifest")
        shell: Rscript {0}

      - name: Write environment variables
        shell: bash
        run: |
          if ${{ github.event_name != 'workflow_dispatch' }}
          then
            echo 'community_dir=Demo' >>  $GITHUB_ENV
            echo 'data_model=https://raw.githubusercontent.com/Sage-Bionetworks/data_flow_config/fds-1486-generate-manifest-action/Demo/dataflow_component.jsonld' >>  $GITHUB_ENV
          else
            echo 'data_model=${{ inputs.data_model }}' >> $GITHUB_ENV
            echo 'community_dir=${{ inputs.community_dir }}' >> $GITHUB_ENV
          fi

      - name: Generate Data Flow manifest
        shell: Rscript {0}
        run: |
          config_path <- file.path("${{ env.community_dir }}", "dfa_config.json")
          print(config_path)

          dfa_config <- jsonlite::read_json(config_path)
          print(dfa_config)

          dataflow_manifest <- tryCatch(
            {
              dfamodules::generate_dataflow_manifest(
                asset_view = dfa_config$dcc$synapse_asset_view,
                schema_url = dfa_config$dcc$data_model_url,
                access_token = "${{ secrets.SYNAPSE_PAT }}",
                na_replace = "",
                base_url = "${{ env.SCHEMATIC_BASE_URL }}")
            },
            error = function(e) {
              stop("ERROR: Data Flow manifest generation has failed")
            }
          )

          message("Successfully generated Data Flow Manifest")
          print(dataflow_manifest)

          filepath <- file.path("${{ env.community_dir }}", "synapse_storage_manifest_dataflow.csv")

          message("Writing manifest to ", filepath)

          write.csv(
            x = dataflow_manifest,
            file = filepath,
            row.names = FALSE
          )

          print(list.files("${{ env.community_dir }}"))

      - name: Open PR
        uses: peter-evans/create-pull-request@v6
        with:
          title: ${{ env.community_dir }} Data Flow manifest generated
          body: |
            Data flow manifest generated by [create-pull-request][1]
          delete_branch: true
          branch-suffix: timestamp
          add-paths: ${{ env.community_dir }}/synapse_storage_manifest_dataflow.csv
