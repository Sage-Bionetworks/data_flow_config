# ------------------------------------------------------------------------------
# Generate a data flow manifest
# Then open a PR to incorporate them into the repo
# ------------------------------------------------------------------------------
name: generate-dataflow-manifest
on:
  workflow_dispatch:
    inputs:
      data_model:
        description: URL to a jsonld data model file
        required: true
      community_dir:
        description: Community directory
        required: true
  pull_request:

jobs:
  generate-manifest:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GH_PAT }}
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v3

      - name: Set up R
        uses: r-lib/actions/setup-r@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pip libicu-dev

      - name: Install R packages
        run: |
          options(repos = c(REPO_NAME = "https://packagemanager.rstudio.com/all/__linux__/xenial/latest", 
            getOption("repos")))
          install.packages(c("stringi", "jsonlite", "dplyr", "remotes", "curl","httr"))
          remotes::install_github("Sage-Bionetworks/dfamodules", ref = "fds-1494-generate-nf-manifest")
        shell: Rscript {0}

      - name: Write environment variables
        shell: bash
        run: |
          if ${{ github.event_name == 'pull_request' }}
          then
            echo 'community_dir=Demo' >>  $GITHUB_ENV
            echo 'data_model==www.datamodel.com' >>  $GITHUB_ENV
          else
            echo 'data_model=${{ inputs.data_model }}' >> $GITHUB_ENV
            echo 'community_dir=${{ inputs.community_dir }}' >> $GITHUB_ENV
          fi

      - name: Generate Data Flow manifest
        shell: Rscript {0}
        run: |
          config_path <- file.path("${{ env.community_dir }}", "dfa_config.json")
          print(config_path)

          config <- jsonlite::read_json(config_path)

          dataflow_manifest <- dfamodules::generate_dataflow_manifest(
            asset_view = dfa_config$dcc$synapse_asset_view,
            schema_url = dfa_config$dcc$data_model_url,
            access_token = Sys.getenv("SYNAPSE_PAT"),
            na_replace = "",
            base_url = Sys.getenv("SCHEMATIC_BASE_URL_PROD"))
